import { z } from "zod";
// Esquema para I_KNA1
const iKna1Schema = z.object({
  MANDT: z.string(),
  KUNNR: z.string(),
  LAND1: z.string(),
  NAME1: z.string(),
  NAME2: z.string(),
  ORT01: z.string(),
  PSTLZ: z.string(),
  REGIO: z.string(),
  SORTL: z.string(),
  STRAS: z.string(),
  TELF1: z.string(),
  TELFX: z.string(),
  XCPDK: z.string(),
  ADRNR: z.string(),
  MCOD1: z.string(),
  MCOD2: z.string(),
  MCOD3: z.string(),
  ANRED: z.string(),
  AUFSD: z.string(),
  BAHNE: z.string(),
  BAHNS: z.string(),
  BBBNR: z.string(),
  BBSNR: z.string(),
  BEGRU: z.string(),
  BRSCH: z.string(),
  BUBKZ: z.string(),
  DATLT: z.string(),
  ERDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  ERNAM: z.string(),
  EXABL: z.string(),
  FAKSD: z.string(),
  FISKN: z.string(),
  KNAZK: z.string(),
  KNRZA: z.string(),
  KONZS: z.string(),
  KTOKD: z.string(),
  KUKLA: z.string(),
  LIFNR: z.string(),
  LIFSD: z.string(),
  LOCCO: z.string(),
  LOEVM: z.string(),
  NAME3: z.string(),
  NAME4: z.string(),
  NIELS: z.string(),
  ORT02: z.string(),
  PFACH: z.string(),
  PSTL2: z.string(),
  COUNC: z.string(),
  CITYC: z.string(),
  RPMKR: z.string(),
  SPERR: z.string(),
  SPRAS: z.string(),
  STCD1: z.string(),
  STCD2: z.string(),
  STKZA: z.string(),
  STKZU: z.string(),
  TELBX: z.string(),
  TELF2: z.string(),
  TELTX: z.string(),
  TELX1: z.string(),
  LZONE: z.string(),
  XZEMP: z.string(),
  VBUND: z.string(),
  STCEG: z.string(),
  DEAR1: z.string(),
  DEAR2: z.string(),
  DEAR3: z.string(),
  DEAR4: z.string(),
  DEAR5: z.string(),
  GFORM: z.string(),
  BRAN1: z.string(),
  BRAN2: z.string(),
  BRAN3: z.string(),
  BRAN4: z.string(),
  BRAN5: z.string(),
  EKONT: z.string(),
  UMSAT: z.string(),
  UMJAH: z.string(),
  UWAER: z.string(),
  JMZAH: z.string(),
  JMJAH: z.string(),
  KATR1: z.string(),
  KATR2: z.string(),
  KATR3: z.string(),
  KATR4: z.string(),
  KATR5: z.string(),
  KATR6: z.string(),
  KATR7: z.string(),
  KATR8: z.string(),
  KATR9: z.string(),
  KATR10: z.string(),
  STKZN: z.string(),
  UMSA1: z.string(),
  TXJCD: z.string(),
  PERIV: z.string(),
  ABRVW: z.string(),
  INSPBYDEBI: z.string(),
  INSPATDEBI: z.string(),
  KTOCD: z.string(),
  PFORT: z.string(),
  WERKS: z.string(),
  DTAMS: z.string(),
  DTAWS: z.string(),
  DUEFL: z.string(),
  HZUOR: z.string(),
  SPERZ: z.string(),
  ETIKG: z.string(),
  CIVVE: z.string(),
  MILVE: z.string(),
  KDKG1: z.string(),
  KDKG2: z.string(),
  KDKG3: z.string(),
  KDKG4: z.string(),
  KDKG5: z.string(),
  XKNZA: z.string(),
  FITYP: z.string(),
  STCDT: z.string(),
  STCD3: z.string(),
  STCD4: z.string(),
  STCD5: z.string(),
  XICMS: z.string(),
  XXIPI: z.string(),
  XSUBT: z.string(),
  CFOPC: z.string(),
  TXLW1: z.string(),
  TXLW2: z.string(),
  CCC01: z.string(),
  CCC02: z.string(),
  CCC03: z.string(),
  CCC04: z.string(),
  CASSD: z.string(),
  KNURL: z.string(),
  J_1KFREPRE: z.string(),
  J_1KFTBUS: z.string(),
  J_1KFTIND: z.string(),
  CONFS: z.string(),
  UPDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  UPTIM: z.string(), // Podría ser z.string().regex(/^\d{2}:\d{2}:\d{2}$/)
  NODEL: z.string(),
  DEAR6: z.string(),
  CVP_XBLCK: z.string(),
  SUFRAMA: z.string(),
  RG: z.string(),
  EXP: z.string(),
  UF: z.string(),
  RGDATE: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  RIC: z.string(),
  RNE: z.string(),
  RNEDATE: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  CNAE: z.string(),
  LEGALNAT: z.string(),
  CRTN: z.string(),
  ICMSTAXPAY: z.string(),
  INDTYP: z.string(),
  TDT: z.string(),
  COMSIZE: z.string(),
  DECREGPC: z.string(),
  "_-VSO_-R_PALHGT": z.string(),
  "_-VSO_-R_PAL_UL": z.string(),
  "_-VSO_-R_PK_MAT": z.string(),
  "_-VSO_-R_MATPAL": z.string(),
  "_-VSO_-R_I_NO_LYR": z.string(),
  "_-VSO_-R_ONE_MAT": z.string(),
  "_-VSO_-R_ONE_SORT": z.string(),
  "_-VSO_-R_ULD_SIDE": z.string(),
  "_-VSO_-R_LOAD_PREF": z.string(),
  "_-VSO_-R_DPOINT": z.string(),
  ALC: z.string(),
  PMT_OFFICE: z.string(),
  FEE_SCHEDULE: z.string(),
  DUNS: z.string(),
  DUNS4: z.string(),
  PSOFG: z.string(),
  PSOIS: z.string(),
  PSON1: z.string(),
  PSON2: z.string(),
  PSON3: z.string(),
  PSOVN: z.string(),
  PSOTL: z.string(),
  PSOHS: z.string(),
  PSOST: z.string(),
  PSOO1: z.string(),
  PSOO2: z.string(),
  PSOO3: z.string(),
  PSOO4: z.string(),
  PSOO5: z.string(),
});

// Esquema para I_KNB1
const iKnb1Schema = z.object({
  MANDT: z.string(),
  KUNNR: z.string(),
  BUKRS: z.string(),
  PERNR: z.string(),
  ERDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  ERNAM: z.string(),
  SPERR: z.string(),
  LOEVM: z.string(),
  ZUAWA: z.string(),
  BUSAB: z.string(),
  AKONT: z.string(),
  BEGRU: z.string(),
  KNRZE: z.string(),
  KNRZB: z.string(),
  ZAMIM: z.string(),
  ZAMIV: z.string(),
  ZAMIR: z.string(),
  ZAMIB: z.string(),
  ZAMIO: z.string(),
  ZWELS: z.string(),
  XVERR: z.string(),
  ZAHLS: z.string(),
  ZTERM: z.string(),
  WAKON: z.string(),
  VZSKZ: z.string(),
  ZINDT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  ZINRT: z.string(),
  EIKTO: z.string(),
  ZSABE: z.string(),
  KVERM: z.string(),
  FDGRV: z.string(),
  VRBKZ: z.string(),
  VLIBB: z.string(),
  VRSZL: z.string(),
  VRSPR: z.string(),
  VRSNR: z.string(),
  VERDT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  PERKZ: z.string(),
  XDEZV: z.string(),
  XAUSZ: z.string(),
  WEBTR: z.string(),
  REMIT: z.string(),
  DATLZ: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  XZVER: z.string(),
  TOGRU: z.string(),
  KULTG: z.string(),
  HBKID: z.string(),
  XPORE: z.string(),
  BLNKZ: z.string(),
  ALTKN: z.string(),
  ZGRUP: z.string(),
  URLID: z.string(),
  MGRUP: z.string(),
  LOCKB: z.string(),
  UZAWE: z.string(),
  EKVBD: z.string(),
  SREGL: z.string(),
  XEDIP: z.string(),
  FRGRP: z.string(),
  VRSDG: z.string(),
  TLFXS: z.string(),
  INTAD: z.string(),
  XKNZB: z.string(),
  GUZTE: z.string(),
  GRICD: z.string(),
  GRIDT: z.string(),
  WBRSL: z.string(),
  CONFS: z.string(),
  UPDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  UPTIM: z.string(), // Podría ser z.string().regex(/^\d{2}:\d{2}:\d{2}$/)
  NODEL: z.string(),
  TLFNS: z.string(),
  CESSION_KZ: z.string(),
  AVSND: z.string(),
  AD_HASH: z.string(),
  QLAND: z.string(),
  CVP_XBLCK_B: z.string(),
  CIIUCODE: z.string(),
  GMVKZD: z.string(),
});

// Esquema para I_KNVV
const iKnvvSchema = z.object({
  MANDT: z.string(),
  KUNNR: z.string(),
  VKORG: z.string(),
  VTWEG: z.string(),
  SPART: z.string(),
  ERNAM: z.string(),
  ERDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  BEGRU: z.string(),
  LOEVM: z.string(),
  VERSG: z.string(),
  AUFSD: z.string(),
  KALKS: z.string(),
  KDGRP: z.string(),
  BZIRK: z.string(),
  KONDA: z.string(),
  PLTYP: z.string(),
  AWAHR: z.string(),
  INCO1: z.string(),
  INCO2: z.string(),
  LIFSD: z.string(),
  AUTLF: z.string(),
  ANTLF: z.string(),
  KZTLF: z.string(),
  KZAZU: z.string(),
  CHSPL: z.string(),
  LPRIO: z.string(),
  EIKTO: z.string(),
  VSBED: z.string(),
  FAKSD: z.string(),
  MRNKZ: z.string(),
  PERFK: z.string(),
  PERRL: z.string(),
  KVAKZ: z.string(),
  KVAWT: z.string(),
  WAERS: z.string(),
  KLABC: z.string(),
  KTGRD: z.string(),
  ZTERM: z.string(),
  VWERK: z.string(),
  VKGRP: z.string(),
  VKBUR: z.string(),
  VSORT: z.string(),
  KVGR1: z.string(),
  KVGR2: z.string(),
  KVGR3: z.string(),
  KVGR4: z.string(),
  KVGR5: z.string(),
  BOKRE: z.string(),
  BOIDT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  KURST: z.string(),
  PRFRE: z.string(),
  PRAT1: z.string(),
  PRAT2: z.string(),
  PRAT3: z.string(),
  PRAT4: z.string(),
  PRAT5: z.string(),
  PRAT6: z.string(),
  PRAT7: z.string(),
  PRAT8: z.string(),
  PRAT9: z.string(),
  PRATA: z.string(),
  KABSS: z.string(),
  KKBER: z.string(),
  CASSD: z.string(),
  RDOFF: z.string(),
  AGREL: z.string(),
  MEGRU: z.string(),
  UEBTO: z.string(),
  UNTTO: z.string(),
  UEBTK: z.string(),
  PVKSM: z.string(),
  PODKZ: z.string(),
  PODTG: z.string(),
  BLIND: z.string(),
  CARRIER_NOTIF: z.string(),
  CVP_XBLCK_V: z.string(),
  "_-BEV1_-EMLGPFAND": z.string(),
  "_-BEV1_-EMLGFORTS": z.string(),
});

// Esquema para I_BAPIADDR1
const iBapiaddr1Schema = z.object({
  ADDR_NO: z.string(),
  FORMOFADDR: z.string(),
  NAME: z.string(),
  NAME_2: z.string(),
  NAME_3: z.string(),
  NAME_4: z.string(),
  C_O_NAME: z.string(),
  CITY: z.string(),
  DISTRICT: z.string(),
  CITY_NO: z.string(),
  POSTL_COD1: z.string(),
  POSTL_COD2: z.string(),
  POSTL_COD3: z.string(),
  PO_BOX: z.string(),
  PO_BOX_CIT: z.string(),
  DELIV_DIS: z.string(),
  STREET: z.string(),
  STREET_NO: z.string(),
  STR_ABBR: z.string(),
  HOUSE_NO: z.string(),
  STR_SUPPL1: z.string(),
  STR_SUPPL2: z.string(),
  LOCATION: z.string(),
  BUILDING: z.string(),
  FLOOR: z.string(),
  ROOM_NO: z.string(),
  COUNTRY: z.string(),
  LANGU: z.string(),
  REGION: z.string(),
  SORT1: z.string(),
  SORT2: z.string(),
  TIME_ZONE: z.string(),
  TAXJURCODE: z.string(),
  ADR_NOTES: z.string(),
  COMM_TYPE: z.string(),
  TEL1_NUMBR: z.string(),
  TEL1_EXT: z.string(),
  FAX_NUMBER: z.string(),
  FAX_EXTENS: z.string(),
  STREET_LNG: z.string(),
  DISTRCT_NO: z.string(),
  CHCKSTATUS: z.string(),
  PBOXCIT_NO: z.string(),
  TRANSPZONE: z.string(),
  HOUSE_NO2: z.string(),
  E_MAIL: z.string(), // Podría ser z.string().email().or(z.literal("")) si el email es opcional o puede ser vacío
  STR_SUPPL3: z.string(),
  TITLE: z.string(),
  COUNTRYISO: z.string(),
  LANGU_ISO: z.string(),
  BUILD_LONG: z.string(),
  REGIOGROUP: z.string(),
  HOME_CITY: z.string(),
  HOMECITYNO: z.string(),
  PCODE1_EXT: z.string(),
  PCODE2_EXT: z.string(),
  PCODE3_EXT: z.string(),
  PO_W_O_NO: z.string(),
  PO_BOX_REG: z.string(),
  POBOX_CTRY: z.string(),
  PO_CTRYISO: z.string(),
  HOMEPAGE: z.string(),
  DONT_USE_S: z.string(),
  DONT_USE_P: z.string(),
  HOUSE_NO3: z.string(),
  LANGU_CR: z.string(),
  LANGUCRISO: z.string(),
  PO_BOX_LOBBY: z.string(),
  DELI_SERV_TYPE: z.string(),
  DELI_SERV_NUMBER: z.string(),
  URI_TYPE: z.string(),
  COUNTY_CODE: z.string(),
  COUNTY: z.string(),
  TOWNSHIP_CODE: z.string(),
  TOWNSHIP: z.string(),
});

// Esquema para T_XKNVI item
const tXknviItemSchema = z.object({
  MANDT: z.string(),
  KUNNR: z.string(),
  ALAND: z.string(),
  TATYP: z.string(),
  TAXKD: z.string(),
  KZ: z.string(),
});

// Esquema para T_XKNVI
const tXknviSchema = z
  .union([
    z.array(tXknviItemSchema),
    z.object({
      item: z.union([tXknviItemSchema, z.array(tXknviItemSchema)]),
    }),
  ])
  .transform((data) => {
    // Normalize to array format
    if (Array.isArray(data)) {
      return data;
    }
    if (!data.item) {
      return [];
    }
    return Array.isArray(data.item) ? data.item : [data.item];
  });

// Esquema para T_XKNVK item
const tXknvkItemSchema = z.object({
  MANDT: z.string(),
  PARNR: z.string(),
  KUNNR: z.string(),
  NAMEV: z.string(),
  NAME1: z.string(),
  ORT01: z.string(),
  ADRND: z.string(),
  ADRNP: z.string(),
  ABTPA: z.string(),
  ABTNR: z.string().nullable(),
  UEPAR: z.string(),
  TELF1: z.string(),
  ANRED: z.string(),
  PAFKT: z.string(),
  PARVO: z.string(),
  PAVIP: z.string(),
  PARGE: z.string(),
  PARLA: z.string(),
  GBDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  VRTNR: z.string(),
  BRYTH: z.string(),
  AKVER: z.string(),
  NMAIL: z.string(),
  PARAU: z.string(), // Podría ser z.string().email().or(z.literal(""))
  PARH1: z.string(),
  PARH2: z.string(),
  PARH3: z.string(),
  PARH4: z.string(),
  PARH5: z.string(),
  MOAB1: z.string(), // Podría ser z.string().regex(/^\d{2}:\d{2}:\d{2}$/)
  MOBI1: z.string(),
  MOAB2: z.string(),
  MOBI2: z.string(),
  DIAB1: z.string(),
  DIBI1: z.string(),
  DIAB2: z.string(),
  DIBI2: z.string(),
  MIAB1: z.string(),
  MIBI1: z.string(),
  MIAB2: z.string(),
  MIBI2: z.string(),
  DOAB1: z.string(),
  DOBI1: z.string(),
  DOAB2: z.string(),
  DOBI2: z.string(),
  FRAB1: z.string(),
  FRBI1: z.string(),
  FRAB2: z.string(),
  FRBI2: z.string(),
  SAAB1: z.string(),
  SABI1: z.string(),
  SAAB2: z.string(),
  SABI2: z.string(),
  SOAB1: z.string(),
  SOBI1: z.string(),
  SOAB2: z.string(),
  SOBI2: z.string(),
  PAKN1: z.string(),
  PAKN2: z.string(),
  PAKN3: z.string(),
  PAKN4: z.string(),
  PAKN5: z.string(),
  SORTL: z.string(),
  FAMST: z.string(),
  SPNAM: z.string(),
  TITEL_AP: z.string(),
  ERDAT: z.string(), // Podría ser z.string().regex(/^\d{4}-\d{2}-\d{2}$/) o z.coerce.date()
  ERNAM: z.string(),
  DUEFL: z.string(),
  LIFNR: z.string(),
  LOEVM: z.string(),
  KZHERK: z.string(),
  ADRNP_2: z.string(),
  PRSNR: z.string(),
  CVP_XBLCK_K: z.string(),
  KZ: z.string(),
});

// Esquema para T_XKNVK
const tXknvkSchema = z
  .union([
    z.array(tXknvkItemSchema),
    z.object({
      item: z.union([tXknvkItemSchema, z.array(tXknvkItemSchema)]),
    }),
  ])
  .transform((data) => {
    // Normalize to an object with an item property that is always an array
    if (Array.isArray(data)) {
      return { item: data };
    }
    if (!data.item) {
      return { item: [] };
    }
    return { item: Array.isArray(data.item) ? data.item : [data.item] };
  });

// Esquema para T_XKNVP item
const tXknvpItemSchema = z.object({
  MANDT: z.string(),
  KUNNR: z.string(),
  VKORG: z.string(),
  VTWEG: z.string(),
  SPART: z.string(),
  PARVW: z.string(),
  PARZA: z.string(),
  KUNN2: z.string(),
  LIFNR: z.string(),
  PERNR: z.string(),
  PARNR: z.string(),
  KNREF: z.string(),
  DEFPA: z.string(),
  KZ: z.string(),
});

// Esquema para T_XKNVP
const tXknvpSchema = z.object({
  item: z.array(tXknvpItemSchema),
});
const tXknvaItemSchema = z.object({}).passthrough();
// Esquema para OUTPUT
const outputSchema = z.object({
  // <!-- Maestro de clientes (parte general) -->
  I_KNA1: iKna1Schema,
  // <!-- Maestro de clientes (sociedad) -->
  I_KNB1: iKnb1Schema,
  // <!-- Maestro de clientes datos comerciales -->
  I_KNVV: iKnvvSchema,
  // <!-- Estructura de referencia BAPI p.direcciones (org./empresa) -->
  I_BAPIADDR1: iBapiaddr1Schema,
  // <!-- Estructura referencia BAPI p.direcciones (personas físicas) -->
  // <I_BAPIADDR2></I_BAPIADDR2>

  // <!-- Maestro de clientes puestos de descarga -->
  // Esquema para T_XKNVA item

  T_XKNVA: z
    .union([
      z.array(tXknvaItemSchema),
      z.object({
        item: z.union([tXknvaItemSchema, z.array(tXknvaItemSchema)]),
      }),
    ])
    .transform((data) => {
      // Normalize to array format
      if (Array.isArray(data)) {
        return data;
      }
      if (!data.item) {
        return [];
      }
      return Array.isArray(data.item) ? data.item : [data.item];
    }),
  T_XKNVI: tXknviSchema,
  T_XKNVK: tXknvkSchema,
  T_XKNVP: tXknvpSchema,
});

// Esquema principal
export const CustomerSoapResponseSchema = z.object({
  OUTPUT: outputSchema,
  O_KUNNR: z.string(),
  O_MESSAGE: z.string(),
  O_TIPO: z.string(),
});

export const CustomerTransformSchema = CustomerSoapResponseSchema.transform(
  (raw) => ({
    customer: {
      id: raw.OUTPUT.I_KNA1.KUNNR,
      name: raw.OUTPUT.I_KNA1.NAME1,
      name2: raw.OUTPUT.I_KNA1.NAME2,
      searchConcept: raw.OUTPUT.I_KNA1.SORTL,
      accountGroup: raw.OUTPUT.I_KNA1.KTOKD,
      taxNumber: raw.OUTPUT.I_KNA1.STCD1,
      taxIdType: raw.OUTPUT.I_KNA1.STCDT,
      taxClass: raw.OUTPUT.I_KNA1.FITYP,
      branch: raw.OUTPUT.I_KNA1.BRSCH,
      address: {
        street: raw.OUTPUT.I_KNA1.STRAS,
        district: raw.OUTPUT.I_KNA1.ORT02,
        province: raw.OUTPUT.I_KNA1.ORT01,
        regionCode: raw.OUTPUT.I_KNA1.REGIO,
        country: raw.OUTPUT.I_KNA1.LAND1,
        postalCode: raw.OUTPUT.I_KNA1.PSTLZ,
      },
      email: raw.OUTPUT.I_BAPIADDR1.E_MAIL,
      phone: raw.OUTPUT.I_KNA1.TELF1,
      createdAt: raw.OUTPUT.I_KNA1.ERDAT,
      sales: {
        society: raw.OUTPUT.I_KNB1.BUKRS,
        salesOrganization: raw.OUTPUT.I_KNVV.VKORG,
        paymentTerms: raw.OUTPUT.I_KNB1.ZTERM,
        salesGroup: raw.OUTPUT.I_KNVV.VKGRP,
        org: raw.OUTPUT.I_KNVV.VKORG,
        distributionChannel: raw.OUTPUT.I_KNVV.VTWEG,
        division: raw.OUTPUT.I_KNVV.SPART,
        salesOffice: raw.OUTPUT.I_KNVV.VKBUR,
        salesZone: raw.OUTPUT.I_KNVV.BZIRK,
        currency: raw.OUTPUT.I_KNVV.WAERS,
        distributionChannelAreaCode: raw.OUTPUT.I_KNVV.VWERK,
      },
      contacts: (raw.OUTPUT.T_XKNVK?.item ?? []).map((p) => ({
        id: p.PARNR,
        role: p.PAFKT,
        department: p.ABTNR,
        name: p.NAMEV,
        lastName: p.NAME1,
        region: p.ABTPA,
        regionCode: p.ORT01,
        phone: p.TELF1,
        email: p.PARAU,
      })),
      interlocutors: (raw.OUTPUT.T_XKNVP?.item ?? []).map((p) => ({
        customerId: p.KUNNR,
        salesOrganization: p.VKORG,
        distributionChannel: p.VTWEG,
        division: p.SPART,
        interlocutorFunction: p.PARVW,
        interlocutorCounter: p.PARZA,
        customerInterlocutorNumber: p.KUNN2,
        accountNumber: p.LIFNR,
        personId: p.PERNR,
        personContactId: p.PARNR,
        interlocutorDenomination: p.KNREF,
        defaultInterlocutor: p.DEFPA,
      })),
    },
  })
);
